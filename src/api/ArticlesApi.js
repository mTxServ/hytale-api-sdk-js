/**
 * Hytale API
 * Hytale Official API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Article'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Article'));
  } else {
    // Browser globals (root is window)
    if (!root.HytaleApi) {
      root.HytaleApi = {};
    }
    root.HytaleApi.ArticlesApi = factory(root.HytaleApi.ApiClient, root.HytaleApi.Article);
  }
}(this, function(ApiClient, Article) {
  'use strict';

  /**
   * Articles service.
   * @module api/ArticlesApi
   * @version 1.0
   */

  /**
   * Constructs a new ArticlesApi. 
   * @alias module:api/ArticlesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getArticleBySlug operation.
     * @callback module:api/ArticlesApi~getArticleBySlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Article} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of articles published
     * @param {String} slug Slug of article
     * @param {module:api/ArticlesApi~getArticleBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Article}
     */
    this.getArticleBySlug = function(slug, callback) {
      var postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getArticleBySlug");
      }


      var pathParams = {
        'slug': slug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Article;

      return this.apiClient.callApi(
        '/blog/post/slug/{slug}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticles operation.
     * @callback module:api/ArticlesApi~getArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of articles published
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.featuredOnly 
     * @param {module:api/ArticlesApi~getArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    this.getArticles = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'featuredOnly': opts['featuredOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Article];

      return this.apiClient.callApi(
        '/blog/post/published', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getArticlesOfMonthAndYear operation.
     * @callback module:api/ArticlesApi~getArticlesOfMonthAndYearCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of articles published on a specific month of an year
     * @param {Number} year Year (ex: 2019)
     * @param {Number} month Month (ex: 01)
     * @param {module:api/ArticlesApi~getArticlesOfMonthAndYearCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    this.getArticlesOfMonthAndYear = function(year, month, callback) {
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getArticlesOfMonthAndYear");
      }

      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling getArticlesOfMonthAndYear");
      }


      var pathParams = {
        'year': year,
        'month': month
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Article];

      return this.apiClient.callApi(
        '/blog/post/archive/{year}/{month}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
